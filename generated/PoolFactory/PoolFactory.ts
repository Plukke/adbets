// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class PoolUpdated extends ethereum.Event {
  get params(): PoolUpdated__Params {
    return new PoolUpdated__Params(this);
  }
}

export class PoolUpdated__Params {
  _event: PoolUpdated;

  constructor(event: PoolUpdated) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class PoolFactory__categoriesResult {
  value0: BigInt;
  value1: string;
  value2: BigInt;
  value3: i32;

  constructor(value0: BigInt, value1: string, value2: BigInt, value3: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    return map;
  }
}

export class PoolFactory__groupsResult {
  value0: BigInt;
  value1: BigInt;
  value2: string;
  value3: string;
  value4: BigInt;
  value5: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: string,
    value3: string,
    value4: BigInt,
    value5: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    return map;
  }
}

export class PoolFactory__listCategoriesResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get poolsCount(): BigInt {
    return this[2].toBigInt();
  }

  get status(): i32 {
    return this[3].toI32();
  }
}

export class PoolFactory__listGroupsResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get category(): BigInt {
    return this[1].toBigInt();
  }

  get name(): string {
    return this[2].toString();
  }

  get country(): string {
    return this[3].toString();
  }

  get poolsCount(): BigInt {
    return this[4].toBigInt();
  }

  get status(): i32 {
    return this[5].toI32();
  }
}

export class PoolFactory extends ethereum.SmartContract {
  static bind(address: Address): PoolFactory {
    return new PoolFactory("PoolFactory", address);
  }

  _categoryIds(): BigInt {
    let result = super.call("_categoryIds", "_categoryIds():(uint256)", []);

    return result[0].toBigInt();
  }

  try__categoryIds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_categoryIds", "_categoryIds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _groupIds(): BigInt {
    let result = super.call("_groupIds", "_groupIds():(uint256)", []);

    return result[0].toBigInt();
  }

  try__groupIds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_groupIds", "_groupIds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _poolIds(): BigInt {
    let result = super.call("_poolIds", "_poolIds():(uint256)", []);

    return result[0].toBigInt();
  }

  try__poolIds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_poolIds", "_poolIds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activePools(param0: BigInt): Address {
    let result = super.call("activePools", "activePools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_activePools(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "activePools",
      "activePools(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  categories(param0: BigInt): PoolFactory__categoriesResult {
    let result = super.call(
      "categories",
      "categories(uint256):(uint256,string,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new PoolFactory__categoriesResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toI32()
    );
  }

  try_categories(
    param0: BigInt
  ): ethereum.CallResult<PoolFactory__categoriesResult> {
    let result = super.tryCall(
      "categories",
      "categories(uint256):(uint256,string,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolFactory__categoriesResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toI32()
      )
    );
  }

  deployedPools(param0: BigInt): Address {
    let result = super.call(
      "deployedPools",
      "deployedPools(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_deployedPools(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployedPools",
      "deployedPools(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getActivePools(): Array<Address> {
    let result = super.call(
      "getActivePools",
      "getActivePools():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getActivePools(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getActivePools",
      "getActivePools():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getBalance(): BigInt {
    let result = super.call("getBalance", "getBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDeployedPools(): Array<Address> {
    let result = super.call(
      "getDeployedPools",
      "getDeployedPools():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getDeployedPools(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getDeployedPools",
      "getDeployedPools():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  groups(param0: BigInt): PoolFactory__groupsResult {
    let result = super.call(
      "groups",
      "groups(uint256):(uint256,uint256,string,string,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new PoolFactory__groupsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toString(),
      result[3].toString(),
      result[4].toBigInt(),
      result[5].toI32()
    );
  }

  try_groups(param0: BigInt): ethereum.CallResult<PoolFactory__groupsResult> {
    let result = super.tryCall(
      "groups",
      "groups(uint256):(uint256,uint256,string,string,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolFactory__groupsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toString(),
        value[3].toString(),
        value[4].toBigInt(),
        value[5].toI32()
      )
    );
  }

  listCategories(): Array<PoolFactory__listCategoriesResultValue0Struct> {
    let result = super.call(
      "listCategories",
      "listCategories():((uint256,string,uint256,uint8)[])",
      []
    );

    return result[0].toTupleArray<
      PoolFactory__listCategoriesResultValue0Struct
    >();
  }

  try_listCategories(): ethereum.CallResult<
    Array<PoolFactory__listCategoriesResultValue0Struct>
  > {
    let result = super.tryCall(
      "listCategories",
      "listCategories():((uint256,string,uint256,uint8)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<PoolFactory__listCategoriesResultValue0Struct>()
    );
  }

  listGroups(): Array<PoolFactory__listGroupsResultValue0Struct> {
    let result = super.call(
      "listGroups",
      "listGroups():((uint256,uint256,string,string,uint256,uint8)[])",
      []
    );

    return result[0].toTupleArray<PoolFactory__listGroupsResultValue0Struct>();
  }

  try_listGroups(): ethereum.CallResult<
    Array<PoolFactory__listGroupsResultValue0Struct>
  > {
    let result = super.tryCall(
      "listGroups",
      "listGroups():((uint256,uint256,string,string,uint256,uint8)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<PoolFactory__listGroupsResultValue0Struct>()
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class CancelPoolCall extends ethereum.Call {
  get inputs(): CancelPoolCall__Inputs {
    return new CancelPoolCall__Inputs(this);
  }

  get outputs(): CancelPoolCall__Outputs {
    return new CancelPoolCall__Outputs(this);
  }
}

export class CancelPoolCall__Inputs {
  _call: CancelPoolCall;

  constructor(call: CancelPoolCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CancelPoolCall__Outputs {
  _call: CancelPoolCall;

  constructor(call: CancelPoolCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get input(): CreatePoolCallInputStruct {
    return changetype<CreatePoolCallInputStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get newCategoryName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get newGroupName(): string {
    return this._call.inputValues[2].value.toString();
  }

  get newGroupCountry(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }
}

export class CreatePoolCallInputStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get url(): string {
    return this[1].toString();
  }

  get category(): BigInt {
    return this[2].toBigInt();
  }

  get group(): BigInt {
    return this[3].toBigInt();
  }

  get acceptDraw(): boolean {
    return this[4].toBoolean();
  }

  get riskLevel(): i32 {
    return this[5].toI32();
  }

  get startTimestamp(): BigInt {
    return this[6].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[7].toBigInt();
  }
}

export class SetPoolResultCall extends ethereum.Call {
  get inputs(): SetPoolResultCall__Inputs {
    return new SetPoolResultCall__Inputs(this);
  }

  get outputs(): SetPoolResultCall__Outputs {
    return new SetPoolResultCall__Outputs(this);
  }
}

export class SetPoolResultCall__Inputs {
  _call: SetPoolResultCall;

  constructor(call: SetPoolResultCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _result(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _homeScore(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _awayScore(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetPoolResultCall__Outputs {
  _call: SetPoolResultCall;

  constructor(call: SetPoolResultCall) {
    this._call = call;
  }
}

export class UpdatePoolsCall extends ethereum.Call {
  get inputs(): UpdatePoolsCall__Inputs {
    return new UpdatePoolsCall__Inputs(this);
  }

  get outputs(): UpdatePoolsCall__Outputs {
    return new UpdatePoolsCall__Outputs(this);
  }
}

export class UpdatePoolsCall__Inputs {
  _call: UpdatePoolsCall;

  constructor(call: UpdatePoolsCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _status(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _categoryId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _groupId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdatePoolsCall__Outputs {
  _call: UpdatePoolsCall;

  constructor(call: UpdatePoolsCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
